export * from "./components";
export function install(app: any, opts?: {}): void;
export const version: any;
export const locale: (l: any) => void;
export const i18n: (initI18n: any) => void;
export function lang(code: any): void;
export default API;
declare const API: {
    Affix: any;
    Alert: any;
    Anchor: any;
    AnchorLink: any;
    Auth: any;
    AutoComplete: any;
    Avatar: any;
    AvatarList: any;
    BackTop: any;
    Badge: any;
    Breadcrumb: any;
    BreadcrumbItem: any;
    Button: any;
    ButtonGroup: any;
    Calendar: any;
    Captcha: any;
    Card: any;
    Carousel: any;
    CarouselItem: any;
    Cascader: any;
    Cell: any;
    CellGroup: any;
    Checkbox: any;
    CheckboxGroup: any;
    Circle: any;
    City: any;
    Col: any;
    Collapse: any;
    ColorPicker: any;
    Content: any;
    Copy: typeof components.Copy;
    CountDown: any;
    CountUp: any;
    DatePicker: {
        name: string;
        mixins: any[];
        props: {
            type: {
                validator(value: any): boolean;
                default: string;
            };
        };
        components: {
            DatePickerPanel: any;
            RangeDatePickerPanel: any;
        };
        computed: {
            panel(): "RangeDatePickerPanel" | "DatePickerPanel";
            ownPickerProps(): any;
        };
    };
    Description: any;
    DescriptionList: any;
    Divider: any;
    Drawer: any;
    Dropdown: any;
    DropdownItem: any;
    DropdownMenu: any;
    Ellipsis: any;
    Email: any;
    Exception: any;
    Footer: any;
    FooterToolbar: any;
    Form: any;
    FormItem: any;
    GlobalFooter: any;
    Grid: any;
    GridItem: any;
    Header: any;
    Icon: any;
    Input: any;
    InputNumber: any;
    Layout: any;
    List: any;
    ListItem: any;
    ListItemMeta: any;
    LoadingBar: {
        start(): void;
        update(percent: any): void;
        finish(): void;
        error(): void;
        config(options: any): void;
        destroy(): void;
    };
    Login: any;
    Menu: any;
    MenuGroup: any;
    MenuItem: any;
    Message: {
        name: string;
        info(options: any): () => void;
        success(options: any): () => void;
        warning(options: any): () => void;
        error(options: any): () => void;
        loading(options: any): () => void;
        message(type: any, options: any): () => void;
        config(options: any): void;
        destroy(): void;
    };
    Mobile: any;
    Modal: any;
    Notice: {
        open(options: any): void;
        info(options: any): void;
        success(options: any): void;
        warning(options: any): void;
        error(options: any): void;
        config(options: any): void;
        close(name: any): boolean;
        destroy(): void;
    };
    Notification: any;
    NotificationItem: any;
    NotificationTab: any;
    NumberInfo: any;
    Numeral: any;
    Option: any;
    OptionGroup: any;
    Page: any;
    PageHeader: any;
    Panel: any;
    Password: any;
    Poptip: any;
    Progress: any;
    Radio: any;
    RadioGroup: any;
    Rate: any;
    Result: any;
    Row: any;
    Scroll: any;
    ScrollIntoView: typeof components.ScrollIntoView;
    ScrollTop: typeof components.ScrollTop;
    Select: any;
    Sider: any;
    Slider: any;
    Spin: any;
    Split: any;
    Step: any;
    Steps: any;
    Submenu: any;
    Submit: any;
    Switch: any;
    Table: any;
    TablePaste: any;
    TabPane: any;
    Tabs: any;
    Tag: any;
    TagSelect: any;
    TagSelectOption: any;
    Time: any;
    Timeline: any;
    TimelineItem: any;
    TimePicker: {
        mixins: any[];
        components: {
            TimePickerPanel: any;
            RangeTimePickerPanel: any;
        };
        props: {
            type: {
                validator(value: any): boolean;
                default: string;
            };
        };
        computed: {
            panel(): "RangeTimePickerPanel" | "TimePickerPanel";
            ownPickerProps(): {
                disabledHours: any;
                disabledMinutes: any;
                disabledSeconds: any;
                hideDisabledOptions: any;
            };
        };
        watch: {
            visible(visible: any): void;
        };
    };
    Tooltip: any;
    Transfer: any;
    Tree: any;
    TreeSelect: any;
    Trend: any;
    Upload: any;
    UserName: any;
    WordCount: any;
    version: any;
    locale: (l: any) => void;
    i18n: (initI18n: any) => void;
    install: (app: any, opts?: {}) => void;
    lang: (code: any) => void;
};
